{"version":3,"sources":["AddHoliday.tsx","UpcomingHolidays.tsx","Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddHoliday","useState","show","setShow","handleClose","Button","variant","onClick","style","float","marginBottom","Modal","onHide","Header","closeButton","Title","Body","Form","Row","Group","as","Col","Label","Control","md","offset","plaintext","readOnly","defaultValue","xs","Footer","formatDate","date","moment","format","UpcomingHolidays","holidays","Table","striped","bordered","hover","size","map","holiday","key","id","person","hutNumber","hutName","startDate","endDate","Dashboard","Container","upcomingHolidays","App","className","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f41e4fd9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nconst AddHoliday = () => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow} style={{ float: 'left', marginBottom: 10 }}>\r\n                Add Holiday\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add Holiday</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>Person</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option>Choose...</option>\r\n                                    <option>David Tull</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} md={{ offset: 4 }}>\r\n                                <Form.Label>Hut</Form.Label>\r\n                                <Form.Control plaintext readOnly defaultValue=\"#934 Coventry 3\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>Start</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option>Choose...</option>\r\n                                    <option>David Tull</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} md={{ offset: 4 }}>\r\n                            <Form.Label>End</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option>Choose...</option>\r\n                                    <option>David Tull</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} xs={2}>\r\n                                <Form.Label>Period</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option></option>\r\n                                    <option>1</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} xs={2}>\r\n                                <Form.Label>Week</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option></option>\r\n                                    <option>1</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} xs={2} md={{ offset: 4 }}>\r\n                                <Form.Label>Period</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option></option>\r\n                                    <option>1</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} xs={2}>\r\n                                <Form.Label>Week</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option></option>\r\n                                    <option>1</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddHoliday;\r\n","import React from 'react';\r\nimport UpcomingHoliday from './models/Holiday';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport AddHoliday from './AddHoliday';\r\n\r\nconst UpcomingHolidays = ({ holidays }: { holidays: UpcomingHoliday[] }) => {\r\n\r\n    return (\r\n        <>\r\n            <AddHoliday />\r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Person</th>\r\n                        <th>Hut</th>\r\n                        <th>From</th>\r\n                        <th>To</th>\r\n                        <th>P/W</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {holidays.map((holiday) => (\r\n                        <tr key={holiday.id}>\r\n                            <td>{holiday.person}</td>\r\n                            <td>\r\n                                #{holiday.hutNumber} {holiday.hutName}\r\n                            </td>\r\n                            <td>{formatDate(holiday.startDate)}</td>\r\n                            <td>{formatDate(holiday.endDate)}</td>\r\n                            <td>13/4 - 13/5</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n};\r\n\r\nconst formatDate = (date: string) => moment(date).format('dddd Do MMMM yyyy');\r\n\r\nexport default UpcomingHolidays;\r\n","import React from 'react';\r\nimport UpcomingHolidays from './UpcomingHolidays';\r\nimport upcomingHolidays from './mocks/upcomingHolidays.json';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Dashboard = () => (\r\n    <Container>\r\n        <h2>Dashboard</h2>\r\n        <Row>\r\n            <Col>\r\n                <UpcomingHolidays holidays={upcomingHolidays} />\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n);\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Dashboard />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}