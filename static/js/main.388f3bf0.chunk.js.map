{"version":3,"sources":["AddHoliday.tsx","UpcomingHolidays.tsx","Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddHoliday","show","handleClose","useState","validated","setValidated","Date","startDate","setStartDate","endDate","setEndDate","reset","Modal","onHide","Header","closeButton","Title","Form","noValidate","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","Body","Row","Group","as","Col","Label","Control","required","md","offset","plaintext","readOnly","defaultValue","xs","selected","onChange","e","onChangeRaw","Footer","Button","variant","onClick","type","formatDate","date","moment","format","UpcomingHolidays","holidays","setShow","style","float","marginBottom","Table","striped","bordered","hover","size","map","holiday","key","id","person","hutNumber","hutName","Dashboard","Container","upcomingHolidays","App","className","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA6GeA,G,MArGI,SAAC,GAMb,IALHC,EAKE,EALFA,KACAC,EAIE,EAJFA,YAIE,EACgCC,oBAAS,GADzC,mBACKC,EADL,KACgBC,EADhB,OAEgCF,mBAAkC,IAAIG,MAFtE,mBAEKC,EAFL,KAEgBC,EAFhB,OAG4BL,mBAAkC,IAAIG,MAHlE,mBAGKG,EAHL,KAGcC,EAHd,KAgBIC,EAAQ,WACVT,IACAG,GAAa,IAGjB,OACI,kBAACO,EAAA,EAAD,CAAOX,KAAMA,EAAMY,OAAQF,GACvB,kBAACC,EAAA,EAAME,OAAP,CAAcC,aAAW,GACrB,kBAACH,EAAA,EAAMI,MAAP,qBAEJ,kBAACC,EAAA,EAAD,CAAMC,YAAU,EAACd,UAAWA,EAAWe,SArBlC,SAACC,GACVA,EAAMC,iBACND,EAAME,kBACNjB,GAAa,IAGgB,IADhBe,EAAMG,cACVC,iBACLb,MAeI,kBAACC,EAAA,EAAMa,KAAP,KACI,kBAACR,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKU,MAAN,CAAYC,GAAIC,KACZ,kBAACZ,EAAA,EAAKa,MAAN,eACA,kBAACb,EAAA,EAAKc,QAAN,CAAcH,GAAG,SAASI,UAAQ,GAC9B,iCACA,gDAGR,kBAACf,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKI,GAAI,CAAEC,OAAQ,IAC/B,kBAACjB,EAAA,EAAKa,MAAN,YACA,kBAACb,EAAA,EAAKc,QAAN,CAAcI,WAAS,EAACC,UAAQ,EAACC,aAAa,sBAGtD,kBAACpB,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,GACrB,kBAACrB,EAAA,EAAKa,MAAN,cACA,kBAAC,IAAD,CAAYS,SAAUhC,EAAWiC,SAAU,SAACC,GAAD,OAAOjC,EAAaiC,IAAIC,YAAa,SAACD,GAAD,OAAOA,EAAEpB,qBAE7F,kBAACJ,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,EAAGL,GAAI,CAAEC,OAAQ,IACtC,kBAACjB,EAAA,EAAKa,MAAN,YACA,kBAAC,IAAD,CAAYS,SAAU9B,EAAS+B,SAAU,SAACC,GAAD,OAAO/B,EAAW+B,QAGnE,kBAACxB,EAAA,EAAKS,IAAN,KACI,kBAACT,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,GACrB,kBAACrB,EAAA,EAAKa,MAAN,eACA,kBAACb,EAAA,EAAKc,QAAN,CAAcH,GAAG,SAASI,UAAQ,GAC9B,iCACA,uCAGR,kBAACf,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,GACrB,kBAACrB,EAAA,EAAKa,MAAN,aACA,kBAACb,EAAA,EAAKc,QAAN,CAAcH,GAAG,SAASI,UAAQ,GAC9B,iCACA,uCAGR,kBAACf,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,EAAGL,GAAI,CAAEC,OAAQ,IACtC,kBAACjB,EAAA,EAAKa,MAAN,eACA,kBAACb,EAAA,EAAKc,QAAN,CAAcH,GAAG,SAASI,UAAQ,GAC9B,iCACA,uCAGR,kBAACf,EAAA,EAAKU,MAAN,CAAYC,GAAIC,IAAKS,GAAI,GACrB,kBAACrB,EAAA,EAAKa,MAAN,aACA,kBAACb,EAAA,EAAKc,QAAN,CAAcH,GAAG,SAASI,UAAQ,GAC9B,iCACA,yCAKhB,kBAACpB,EAAA,EAAM+B,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASnC,GAArC,WAGA,kBAACiC,EAAA,EAAD,CAAQC,QAAQ,UAAUE,KAAK,UAA/B,aCtDdC,EAAa,SAACC,GAAD,OAAkBC,IAAOD,GAAME,OAAO,sBAE1CC,EAzCU,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAgD,EAChDlD,oBAAS,GADuC,mBACjEF,EADiE,KAC3DqD,EAD2D,KAMxE,OACI,oCACI,iDACA,kBAACV,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QALf,kBAAMQ,GAAQ,IAKsBC,MAAO,CAAEC,MAAO,OAAQC,aAAc,KAArF,eAGA,kBAAC,EAAD,CAAYxD,KAAMA,EAAMC,YATZ,kBAAMoD,GAAQ,MAU1B,kBAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAC/B,+BACI,4BACI,sCACA,mCACA,oCACA,oCAGR,+BACKT,EAASU,KAAI,SAACC,GAAD,OACV,wBAAIC,IAAKD,EAAQE,IACb,4BAAKF,EAAQG,QACb,gCACMH,EAAQI,UADd,IAC0BJ,EAAQK,SAElC,4BAAKrB,EAAWgB,EAAQzD,YACxB,4BAAKyC,EAAWgB,EAAQvD,kB,wBCnBrC6D,EAXG,kBACd,kBAACC,EAAA,EAAD,KACI,yCACA,kBAAC7C,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,KACI,kBAAC,EAAD,CAAkBwB,SAAUmB,QCG7BC,MAVf,WACI,OACI,yBAAKC,UAAU,OACX,kBAACH,EAAA,EAAD,CAAWI,OAAK,GACZ,kBAAC,EAAD,SCGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDgItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.388f3bf0.chunk.js","sourcesContent":["import React, { useState, FormEvent } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst AddHoliday = ({\r\n    show,\r\n    handleClose,\r\n}: {\r\n    show: boolean;\r\n    handleClose: () => void;\r\n}) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [startDate, setStartDate] = useState<Date | undefined | null>(new Date());\r\n    const [endDate, setEndDate] = useState<Date | undefined | null>(new Date());\r\n\r\n    const save = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setValidated(true);\r\n\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === true) {\r\n            reset();\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        handleClose();\r\n        setValidated(false);\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={reset}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add Holiday</Modal.Title>\r\n            </Modal.Header>\r\n            <Form noValidate validated={validated} onSubmit={save}>\r\n                <Modal.Body>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Person</Form.Label>\r\n                            <Form.Control as=\"select\" required>\r\n                                <option></option>\r\n                                <option>David Tull</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} md={{ offset: 4 }}>\r\n                            <Form.Label>Hut</Form.Label>\r\n                            <Form.Control plaintext readOnly defaultValue=\"#934 Coventry 3\" />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} xs={1}>\r\n                            <Form.Label>Start</Form.Label>\r\n                            <DatePicker selected={startDate} onChange={(e) => setStartDate(e)} onChangeRaw={(e) => e.preventDefault()}/>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} xs={1} md={{ offset: 6 }}>\r\n                            <Form.Label>End</Form.Label>\r\n                            <DatePicker selected={endDate} onChange={(e) => setEndDate(e)} />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} xs={2}>\r\n                            <Form.Label>Period</Form.Label>\r\n                            <Form.Control as=\"select\" required>\r\n                                <option></option>\r\n                                <option>1</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} xs={2}>\r\n                            <Form.Label>Week</Form.Label>\r\n                            <Form.Control as=\"select\" required>\r\n                                <option></option>\r\n                                <option>1</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} xs={2} md={{ offset: 4 }}>\r\n                            <Form.Label>Period</Form.Label>\r\n                            <Form.Control as=\"select\" required>\r\n                                <option></option>\r\n                                <option>1</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} xs={2}>\r\n                            <Form.Label>Week</Form.Label>\r\n                            <Form.Control as=\"select\" required>\r\n                                <option></option>\r\n                                <option>1</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={reset}>\r\n                        Discard\r\n                    </Button>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Save\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddHoliday;\r\n","import React, { useState } from 'react';\r\nimport UpcomingHoliday from './models/Holiday';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\nimport AddHoliday from './AddHoliday';\r\n\r\nconst UpcomingHolidays = ({ holidays }: { holidays: UpcomingHoliday[] }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <h3>Upcoming Holidays</h3>\r\n            <Button variant=\"primary\" onClick={handleShow} style={{ float: 'left', marginBottom: 10 }}>\r\n                Add Holiday\r\n            </Button>\r\n            <AddHoliday show={show} handleClose={handleClose} />\r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Person</th>\r\n                        <th>Hut</th>\r\n                        <th>From</th>\r\n                        <th>To</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {holidays.map((holiday) => (\r\n                        <tr key={holiday.id}>\r\n                            <td>{holiday.person}</td>\r\n                            <td>\r\n                                #{holiday.hutNumber} {holiday.hutName}\r\n                            </td>\r\n                            <td>{formatDate(holiday.startDate)}</td>\r\n                            <td>{formatDate(holiday.endDate)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n};\r\n\r\nconst formatDate = (date: string) => moment(date).format('dddd Do MMMM yyyy');\r\n\r\nexport default UpcomingHolidays;\r\n","import React from 'react';\r\nimport UpcomingHolidays from './UpcomingHolidays';\r\nimport upcomingHolidays from './mocks/upcomingHolidays.json';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Dashboard = () => (\r\n    <Container>\r\n        <h2>Dashboard</h2>\r\n        <Row>\r\n            <Col>\r\n                <UpcomingHolidays holidays={upcomingHolidays} />\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n);\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Dashboard />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}